-- phpMyAdmin SQL Dump
-- version 2.6.2
-- http://www.phpmyadmin.net
--
-- Хост: mysql64.1gb.ru:3306
-- Время создания: Апр 05 2016 г., 13:30
-- Версия сервера: 5.1.47
-- Версия PHP: 5.2.17
--
-- БД: `gb_x_seraf18d`
--

-- --------------------------------------------------------

--
-- Структура таблицы `st_blogs`
--

CREATE TABLE `st_blogs` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `content` text COLLATE utf8_unicode_ci,
  `sources` text COLLATE utf8_unicode_ci,
  `preview` text COLLATE utf8_unicode_ci,
  `category_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `views` int(11) NOT NULL DEFAULT '0',
  `visible` int(11) NOT NULL DEFAULT '0',
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci AUTO_INCREMENT=6 ;

--
-- Дамп данных таблицы `st_blogs`
--

INSERT INTO `st_blogs` VALUES (1, 'Вступление [часть 1]', '<figure>\n    <img src="/img/u/76astg6d6978asdg.jpg" alt="Движок" />\n    <figcaption>\n        <span>Нет, игровой движок выглядит немного не так.</span>\n    </figcaption>\n</figure>\n<br/>\n<h3>Что такое игровой движок?</h3>\n<annotation>\n    Игровой движок - набор подсистем, предоставляющий функционал, используемый при разработке игр.\n    <br />\n    Если тебе, читатель, не интересна гигимония по поводу преимуществ и краткого\n    введения, то стоит сразу же перейти к <a href="#h3about">основной части</a>.\n</annotation>\n<p>\n    Каждый движок можно разбить примерно на следующие составляющие:\n    <ul>\n        <li>Графическая подсистема</li>\n        <li>Звуковая подсистема</li>\n        <li>Подсистема ввода</li>\n        <li>Подсистема моделей и физики</li>\n        <li>Ядро</li>\n    </ul>\n    Естественно это не полный перечень подсистем и если вдваться в подробности -\n    можно выделить больше составляющих.\n</p>\n<h3>Зачем оно всё?</h3>\n<p>\n    Для подавляющего большинства разработчиков не должно возникнуть такого вопроса,\n    но всё же кратко стоит упомянуть перечень положительных пунктов.\n    <ul>\n        <li>Упрощение процесса разработки. Вместо вызова сотен стандартных\n            функций для реализации какой-либо примитивной возможности -\n            зачастую достаточно вызвать одну. Игровой движок\n            сделает за разработчика весь этот вызов, ориентируясь на стандартное поведение.</li>\n        <li>То же самое можно сказать и о кроссплатформенности. Движок сделает игру\n            более переносимой с одной платформы на другую.</li>\n        <li>Код становится более читаемым. Ориентируясь на стандартизированную\n            архитектуру - можно без проблем выяснить где находится тот или иной код.</li>\n        <li>Предоставление абстракции над стандартными низкоуровневыми функциями позволяет\n            работать в основном только над логикой игры, на заботясь о копаниях в алгоритмах и\n            оптимизациях составляющих подсистем.</li>\n    </ul>\n</p>\n<h3 id="h3about">Что планируется охватить?</h3>\n<p>\n    Учитывая всё вышесказанное, я хочу акцентировать внимание на\n    том, что изначально продуманная архитектура очень важна при разработке чего-либо.\n    Не важно что это - игра или простое приложение-калькулятор.\n</p>', '<figure>\r\n    <img src="/img/u/76astg6d6978asdg.jpg" alt="Движок" />\r\n    <figcaption>\r\n        <span>Нет, игровой движок выглядит немного не так.</span>\r\n    </figcaption>\r\n</figure>\r\n<br/>\r\n\r\n<h3>Что такое игровой движок?</h3>\r\n\r\n<annotation>\r\n    Игровой движок - набор подсистем, предоставляющий функционал, используемый при разработке игр.\r\n    <br />\r\n    Если тебе, читатель, не интересна гигимония по поводу преимуществ и краткого\r\n    введения, то стоит сразу же перейти к <a href="#h3about">основной части</a>.\r\n</annotation>\r\n\r\n<p>\r\n    Каждый движок можно разбить примерно на следующие составляющие:\r\n    <ul>\r\n        <li>Графическая подсистема</li>\r\n        <li>Звуковая подсистема</li>\r\n        <li>Подсистема ввода</li>\r\n        <li>Подсистема моделей и физики</li>\r\n        <li>Ядро</li>\r\n    </ul>\r\n    Естественно это не полный перечень подсистем и если вдваться в подробности -\r\n    можно выделить больше составляющих.\r\n</p>\r\n\r\n<h3>Зачем оно всё?</h3>\r\n\r\n<p>\r\n    Для подавляющего большинства разработчиков не должно возникнуть такого вопроса,\r\n    но всё же кратко стоит упомянуть перечень положительных пунктов.\r\n    <ul>\r\n        <li>Упрощение процесса разработки. Вместо вызова сотен стандартных\r\n            функций для реализации какой-либо примитивной возможности -\r\n            зачастую достаточно вызвать одну. Игровой движок\r\n            сделает за разработчика весь этот вызов, ориентируясь на стандартное поведение.</li>\r\n        <li>То же самое можно сказать и о кроссплатформенности. Движок сделает игру\r\n            более переносимой с одной платформы на другую.</li>\r\n        <li>Код становится более читаемым. Ориентируясь на стандартизированную\r\n            архитектуру - можно без проблем выяснить где находится тот или иной код.</li>\r\n        <li>Предоставление абстракции над стандартными низкоуровневыми функциями позволяет\r\n            работать в основном только над логикой игры, на заботясь о копаниях в алгоритмах и\r\n            оптимизациях составляющих подсистем.</li>\r\n    </ul>\r\n</p>\r\n\r\n\r\n<h3 id="h3about">Что планируется охватить?</h3>\r\n<p>\r\n    Учитывая всё вышесказанное, я хочу акцентировать внимание на\r\n    том, что изначально продуманная архитектура очень важна при разработке чего-либо.\r\n    Не важно что это - игра или простое приложение-калькулятор.\r\n</p>', '<annotation>\r\n    А что же такое игровой движок? Если кратко - набор подсистем, предоставляющий функционал, используемый при разработке игр.\r\n</annotation>\r\n<figure>\r\n    <img src="/img/u/76astg6d6978asdg.jpg" alt="Движок" />\r\n    <figcaption>\r\n        <span>Нет, игровой движок выглядит немного не так.</span>\r\n    </figcaption>\r\n</figure>\r\n<p>Именно с этого вопроса я хочу открыть цикл еженедельных статей о разработке игрового движка.</p>', 1, 1, 1024, 1, '2014-05-15 12:25:59', '2016-04-04 07:11:12');
INSERT INTO `st_blogs` VALUES (2, 'Готовимся к атаке! [часть 2]', '<figure>\n  <img src="/img/u/tds612gs78asdhs7.jpg" alt="/img/u/tds612gs78asdhs7.jpg" />\n  <figcaption><span>Готовим окружение</span></figcaption>\n</figure>', '<figure>\r\n  <img src="/img/u/tds612gs78asdhs7.jpg" alt="/img/u/tds612gs78asdhs7.jpg" />\r\n  <figcaption><span>Готовим окружение</span></figcaption>\r\n</figure>\r\n', '<annotation>\r\n    Решаем проблемы с настройкой окружения для разработки.\r\n</annotation>\r\n<figure>\r\n  <img src="/img/u/tds612gs78asdhs7.jpg" alt="/img/u/tds612gs78asdhs7.jpg" />\r\n  <figcaption><span>Готовим окружение</span></figcaption>\r\n</figure>\r\n<p>IntelliJ IDEA, PHP, Compoer и прочее.</p>', 1, 1, 435, 0, '2014-05-15 14:17:52', '2016-03-14 20:04:32');
INSERT INTO `st_blogs` VALUES (3, 'Установка Laravel под Windows с нуля', '<figure>\r\n  <img src="/img/u/asdjt786kjhsadd7.jpg" alt="/img/u/asdjt786kjhsadd7.jpg" />\r\n  <figcaption><span>Windows, Laravel, Composer... Что дальше? Рогатая камера-олень?</span></figcaption>\r\n</figure>\r\n<p>Самая краткая на свете инструкция по установке Laravel 4...</p>\r\n\r\n<br />\r\n<h3>Установка PHP (сам язык)</h3>\r\n<ul>\r\n    <li>Идём на <a href="http://windows.php.net/download/" target="_blank">http://windows.php.net/download/</a> и скачиваем любую <kbd>Thread Safe</kbd> версию PHP, желательно 5.4+</li>\r\n    <li>Распаковываем архив в любое место, например <kbd>C:\\php\\</kbd></li>\r\n    <li>Прописываем в PATH (Win+Pause Break -> Доп. параметры системы -> Переменные среды -> там есть PATH - туда надо добавить папочку, где лежит php.exe)</li>\r\n</ul>\r\n<annotation>\r\n    Thread Safe версия используется под Apache, Nginx и прочим, Not Thread Safe под IIS сервером.\r\n    Предложенное мною решение скачать именно TS версию обуславливается тем, что в перспективе\r\n    вы захотите попробовать поставить Apache или Nginx сервер.\r\n    <br /><br />\r\n    Прописывание каталога в <b>PATH</b> переменную нужно для того, что бы в терминале была доступна команда php.\r\n</annotation>\r\n\r\n<br />\r\n<h3>Настройка php.ini</h3>\r\n<ul>\r\n    <li>Открываем <kbd>C:\\php\\</kbd></li>\r\n    <li>Переименовываем любой php.ini.*** в php.ini</li>\r\n    <li>Открываем его в любом редакторе</li>\r\n    <li>Раскомментируем расширения curl, gd2, mbstring, openssl, sockets и mcrypt, если есть (опционально: pdo_mysql, pdo_sqlite, sqlite3)</li>\r\n    <li>Раскомментируем строчку <kbd>extension_dir</kbd>, там должно быть значение <kbd>extension_dir = "ext"</kbd></li>\r\n    <li>Для того, что бы проверить работоспособность - достаточно открыть консоль и написать <kbd>php -v</kbd>. Если никаких сообщений о проблемах не всплыло, то всё настроено верно.</li>\r\n</ul>\r\n<annotation>\r\n    Расширения выглядят как строчка <kbd>extension=php_название.dll</kbd>. Закомментированные расширения имеют вначале строки точку с запятой.\r\n    <br /><br />\r\n    Расширение mcrypt, встроено в php, начиная, вроде бы с версии 5.5, так что его вполне может не оказаться в списке доступных расширений.\r\n    <br /><br />\r\n    Опциональность расширений sqlite и mysql обуславливается тем, что я не знаю какую именно БД вы будете использовать. Может вообще postgres?\r\n</annotation>\r\n\r\n<br />\r\n<h3>Установка Git (система контроля версий)</h3>\r\n<ul>\r\n    <li>Идём на <a href="http://git-scm.com/" target="_blank">http://git-scm.com/</a></li>\r\n    <li>Тыкаем на "Download for windows"</li>\r\n    <li>Устанавливаем</li>\r\n    <li>Опционально: <a href="https://code.google.com/p/tortoisegit/" target="_blank">TortoiseGit</a></li>\r\n</ul>\r\n<annotation>\r\n    Установка именно Git, как системы контроля версий обуславливается тем,\r\n    что самые популярные пакеты для PHP располагаются на Github и Bitbucket (Git-ресурсы). Однако, за очень редкими исключениями может использоваться mercurial или (тьфу-тьфу-тьфу) SVN.\r\n    <br /><br />\r\n    Если честно, я ставлю git из исходников, так что не вполне может быть то, что "черепашка"\r\n    идёт в комплекте с гитом, хотя не уверен.\r\n    <br /><br />\r\n    Предложение установить "черепашку" (TortoiseGit) обусловлено тем,\r\n    что может потребоваться удобное управление Git с визуальным интерфейсом, без использования терминала.\r\n    Пока что "черепашка" - одна из лучших систем визуального управления системами контроля версий.\r\n</annotation>\r\n\r\n<br />\r\n<h3>Установка Composer (менеджер пакетов для php)</h3>\r\n<ul>\r\n    <li>Идём на <a href="https://getcomposer.org/download/" target="_blank">https://getcomposer.org/download/</a></li>\r\n    <li>Скачиваем <kbd>Composer-Setup.exe</kbd></li>\r\n    <li>Устанавливаем</li>\r\n</ul>\r\n<annotation>\r\n    Подробнее о "Композере" вы можете прочитать в интернете, например\r\n    на хабре <a href="http://habrahabr.ru/post/145946/" target="_blank">http://habrahabr.ru/post/145946/</a>.\r\n    <br /><br />\r\n    До этого момента мы устанавливали окружение, которое требуется <b>любому</b> PHP разработчику.\r\n    Ничего лишнего и никак не относится к самому фреймворку. Ниже мы приступаем непосредственно к установке самого фреймворка.\r\n</annotation>\r\n\r\n<br />\r\n<h3>Установка Laravel</h3>\r\n<ul>\r\n    <li>Открываем любую пустую папочку</li>\r\n    <li>Shift + Правая кнопочка мыши -> Открыть окно команд -> набираем <kbd>composer create-project laravel/laravel --prefer-dist</kbd></li>\r\n</ul>\r\n<annotation>\r\n    Подробнее о командах composer можно прочитать тут: <a href="https://getcomposer.org/doc/" target="_blank">https://getcomposer.org/doc/</a>\r\n</annotation>\r\n\r\n\r\n<br />\r\n<h3>Запускаем сервер</h3>\r\n<ul>\r\n    <li>Открываем папочку <kbd>laravel/public/</kbd></li>\r\n    <li>Shift + Правая кнопочка мыши -> Открыть окно команд</li>\r\n    <li>Набираем <kbd>php -S 127.0.0.1:80</kbd></li>\r\n    <li>Открываем <kbd>http://127.0.0.1</kbd> или <kbd>http://localhost</kbd> в браузере</li>\r\n</ul>\r\n<annotation>\r\n    Для разработки вполне достаточно локального однопоточного сервера, встроенного в PHP.\r\n    <br /><br />\r\n    Установка mysql опциональна, т.к. для начала вполне достаточно использования sqlite.\r\n</annotation>\r\n\r\n<br />\r\n<h3>Некоторые рекомендуемые приложения</h3>\r\n<ul>\r\n    <li>ansicon - добавление в консоль управляющих последовательностей ascii (например для вывода текста разного цвета)</li>\r\n    <li>cygwin - эмуляция почти полноценного *nix окружения под windows (команды <kbd>ls</kbd>,\r\n        <kbd>rm</kbd>, <kbd>cp</kbd>, <kbd>chmod</kbd> и прочее)</li>\r\n    <li>IntelliJ IDEA или PHPStorm - пожалуй лучшая в мире\r\n        IDE для разработки на любых языках (ну кроме C++). Хочу заметить, что\r\n        <a href="http://confluence.jetbrains.com/display/IDEADEV/EAP" target="_blank">EAP версия IntelliJ IDEA</a> (на момент публикации по крайней мере) абсолютно бесплатная.</li>\r\n    <li>Sublime Text 2 - когда не нужна полноценная IDE</li>\r\n</ul>\r\n\r\n<h3>Что делать не стоит (желательно никогда)</h3>\r\n<ul>\r\n    <li>Никогда не используйте денвер (Denwer) - он доставит много проблем, помимо того, что он устарел на пол десятка лет. Можно использовать любую сборку WAMP, кроме этой.</li>\r\n    <li>Не стоит использовать Notepad или Notepad++ (Зачем, если есть Sublime).</li>\r\n</ul>\r\n', '<figure>\r\n  <img src="/img/u/asdjt786kjhsadd7.jpg" alt="/img/u/asdjt786kjhsadd7.jpg" />\r\n  <figcaption><span>Windows, Laravel, Composer... Что дальше? Рогатая камера-олень?</span></figcaption>\r\n</figure>\r\n<p>Самая краткая на свете инструкция по установке Laravel 4...</p>\r\n\r\n<br />\r\n<h3>Установка PHP (сам язык)</h3>\r\n<ul>\r\n    <li>Идём на <a href="http://windows.php.net/download/" target="_blank">http://windows.php.net/download/</a> и скачиваем любую <kbd>Thread Safe</kbd> версию PHP, желательно 5.4+</li>\r\n    <li>Распаковываем архив в любое место, например <kbd>C:\\php\\</kbd></li>\r\n    <li>Прописываем в PATH (Win+Pause Break -> Доп. параметры системы -> Переменные среды -> там есть PATH - туда надо добавить папочку, где лежит php.exe)</li>\r\n</ul>\r\n<annotation>\r\n    Thread Safe версия используется под Apache, Nginx и прочим, Not Thread Safe под IIS сервером.\r\n    Предложенное мною решение скачать именно TS версию обуславливается тем, что в перспективе\r\n    вы захотите попробовать поставить Apache или Nginx сервер.\r\n    <br /><br />\r\n    Прописывание каталога в <b>PATH</b> переменную нужно для того, что бы в терминале была доступна команда php.\r\n</annotation>\r\n\r\n<br />\r\n<h3>Настройка php.ini</h3>\r\n<ul>\r\n    <li>Открываем <kbd>C:\\php\\</kbd></li>\r\n    <li>Переименовываем любой php.ini.*** в php.ini</li>\r\n    <li>Открываем его в любом редакторе</li>\r\n    <li>Раскомментируем расширения curl, gd2, mbstring, openssl, sockets и mcrypt, если есть (опционально: pdo_mysql, pdo_sqlite, sqlite3)</li>\r\n    <li>Раскомментируем строчку <kbd>extension_dir</kbd>, там должно быть значение <kbd>extension_dir = "ext"</kbd></li>\r\n    <li>Для того, что бы проверить работоспособность - достаточно открыть консоль и написать <kbd>php -v</kbd>. Если никаких сообщений о проблемах не всплыло, то всё настроено верно.</li>\r\n</ul>\r\n<annotation>\r\n    Расширения выглядят как строчка <kbd>extension=php_название.dll</kbd>. Закомментированные расширения имеют вначале строки точку с запятой.\r\n    <br /><br />\r\n    Расширение mcrypt, встроено в php, начиная, вроде бы с версии 5.5, так что его вполне может не оказаться в списке доступных расширений.\r\n    <br /><br />\r\n    Опциональность расширений sqlite и mysql обуславливается тем, что я не знаю какую именно БД вы будете использовать. Может вообще postgres?\r\n</annotation>\r\n\r\n<br />\r\n<h3>Установка Git (система контроля версий)</h3>\r\n<ul>\r\n    <li>Идём на <a href="http://git-scm.com/" target="_blank">http://git-scm.com/</a></li>\r\n    <li>Тыкаем на "Download for windows"</li>\r\n    <li>Устанавливаем</li>\r\n    <li>Опционально: <a href="https://code.google.com/p/tortoisegit/" target="_blank">TortoiseGit</a></li>\r\n</ul>\r\n<annotation>\r\n    Установка именно Git, как системы контроля версий обуславливается тем,\r\n    что самые популярные пакеты для PHP располагаются на Github и Bitbucket (Git-ресурсы). Однако, за очень редкими исключениями может использоваться mercurial или (тьфу-тьфу-тьфу) SVN.\r\n    <br /><br />\r\n    Если честно, я ставлю git из исходников, так что не вполне может быть то, что "черепашка"\r\n    идёт в комплекте с гитом, хотя не уверен.\r\n    <br /><br />\r\n    Предложение установить "черепашку" (TortoiseGit) обусловлено тем,\r\n    что может потребоваться удобное управление Git с визуальным интерфейсом, без использования терминала.\r\n    Пока что "черепашка" - одна из лучших систем визуального управления системами контроля версий.\r\n</annotation>\r\n\r\n<br />\r\n<h3>Установка Composer (менеджер пакетов для php)</h3>\r\n<ul>\r\n    <li>Идём на <a href="https://getcomposer.org/download/" target="_blank">https://getcomposer.org/download/</a></li>\r\n    <li>Скачиваем <kbd>Composer-Setup.exe</kbd></li>\r\n    <li>Устанавливаем</li>\r\n</ul>\r\n<annotation>\r\n    Подробнее о "Композере" вы можете прочитать в интернете, например\r\n    на хабре <a href="http://habrahabr.ru/post/145946/" target="_blank">http://habrahabr.ru/post/145946/</a>.\r\n    <br /><br />\r\n    До этого момента мы устанавливали окружение, которое требуется <b>любому</b> PHP разработчику.\r\n    Ничего лишнего и никак не относится к самому фреймворку. Ниже мы приступаем непосредственно к установке самого фреймворка.\r\n</annotation>\r\n\r\n<br />\r\n<h3>Установка Laravel</h3>\r\n<ul>\r\n    <li>Открываем любую пустую папочку</li>\r\n    <li>Shift + Правая кнопочка мыши -> Открыть окно команд -> набираем <kbd>composer create-project laravel/laravel --prefer-dist</kbd></li>\r\n</ul>\r\n<annotation>\r\n    Подробнее о командах composer можно прочитать тут: <a href="https://getcomposer.org/doc/" target="_blank">https://getcomposer.org/doc/</a>\r\n</annotation>\r\n\r\n\r\n<br />\r\n<h3>Запускаем сервер</h3>\r\n<ul>\r\n    <li>Открываем папочку <kbd>laravel/public/</kbd></li>\r\n    <li>Shift + Правая кнопочка мыши -> Открыть окно команд</li>\r\n    <li>Набираем <kbd>php -S 127.0.0.1:80</kbd></li>\r\n    <li>Открываем <kbd>http://127.0.0.1</kbd> или <kbd>http://localhost</kbd> в браузере</li>\r\n</ul>\r\n<annotation>\r\n    Для разработки вполне достаточно локального однопоточного сервера, встроенного в PHP.\r\n    <br /><br />\r\n    Установка mysql опциональна, т.к. для начала вполне достаточно использования sqlite.\r\n</annotation>\r\n\r\n<br />\r\n<h3>Некоторые рекомендуемые приложения</h3>\r\n<ul>\r\n    <li>ansicon - добавление в консоль управляющих последовательностей ascii (например для вывода текста разного цвета)</li>\r\n    <li>cygwin - эмуляция почти полноценного *nix окружения под windows (команды <kbd>ls</kbd>,\r\n        <kbd>rm</kbd>, <kbd>cp</kbd>, <kbd>chmod</kbd> и прочее)</li>\r\n    <li>IntelliJ IDEA или PHPStorm - пожалуй лучшая в мире\r\n        IDE для разработки на любых языках (ну кроме C++). Хочу заметить, что\r\n        <a href="http://confluence.jetbrains.com/display/IDEADEV/EAP" target="_blank">EAP версия IntelliJ IDEA</a> (на момент публикации по крайней мере) абсолютно бесплатная.</li>\r\n    <li>Sublime Text 2 - когда не нужна полноценная IDE</li>\r\n</ul>\r\n\r\n<h3>Что делать не стоит (желательно никогда)</h3>\r\n<ul>\r\n    <li>Никогда не используйте денвер (Denwer) - он доставит много проблем, помимо того, что он устарел на пол десятка лет. Можно использовать любую сборку WAMP, кроме этой.</li>\r\n    <li>Не стоит использовать Notepad или Notepad++ (Зачем, если есть Sublime).</li>\r\n</ul>\r\n', '<annotation>\r\n  Windows, Laravel, Composer... Что дальше?\r\n</annotation>\r\n<figure>\r\n  <img src="/img/u/asdjt786kjhsadd7.jpg" alt="/img/u/asdjt786kjhsadd7.jpg" />\r\n  <figcaption><span>Windows, Laravel, Composer... Что дальше? Рогатая камера-олень?</span></figcaption>\r\n</figure>\r\n<p>Забудем о Денвере, как о страшном сне.</p>', 3, 1, 1962, 1, '2014-05-15 17:14:30', '2016-04-04 02:40:44');
INSERT INTO `st_blogs` VALUES (4, 'Ошибки при использовании асинхронности', '<figure>\n  <img src="/img/u/76dhfwds7o9847.jpg" alt="/img/u/76dhfwds7o9847.jpg" />\n  <figcaption><span>Для каждого языка нужен свой подход.</span></figcaption>\n</figure>\n<p>Не забывайте, что JS - асинхронный язык программирования и очень часто бывает сложно понять откуда ошибка, ну например в таком коде:</p>\n<code data-lang="javascript">var arr = [''test'', ''ololo'', ''123123a'', 4], current = undefined;\nfor (var i = 0, length = arr.length; i < length; i++) {\n  current = arr;\n \n  $.post(''/some/'' + current, {}, function(result) {\n    $(''.any-'' + current).text(result);\n  });\n}</code>\n<p>В теории должен слаться асинхронный запрос на <kbd>/some/test</kbd>, затем на <kbd>/some/ololo</kbd> и так далее и затем результат вставляться в элемент с классом <kbd>class="any-test"</kbd>, затем в <kbd>class="any-ololo"</kbd> и т.д. То есть запросу на N должен соответствовать элемент <kbd>.any-N</kbd>, но этого не будет. На практике же весь результат будет отправляться в элемент с <kbd>class="any-4"</kbd>, т.е. с классом из последней ячейки массива arr.</p>\n<p>Ответ на вопрос "почему же так" сокрыт как раз в асинхронности языка. Каждый вызов метода <kbd>$.post</kbd> происходит в отдельном потоке (конечно же это не так, но для примера определение вполне сгодится) и в тот момент, когда происходит вызов - JS не дожидается его завершения и переходит к следующей итерации цикла <kbd>for</kbd>. Таким образом переменная <kbd>current</kbd> будет перезаписываться до самого окончания цикла и в момент вызова коллбека с результатом выполнения - значением этой переменной будет самый последний элемент из массива.</p>\n<p>А как же решить эту проблему? Всё просто, надо добавить замыкание с сохранением состояния этой переменной:</p>\n<code data-lang="javascript">var arr = [''test'', ''ololo'', ''123123a'', 4], current = undefined;\nfor (var i = 0, length = arr.length; i < length; i++) {\n  current = arr;\n \n  (function (current) { // добавляем тут\n    $.post(''/some/'' + current, {}, function(result) {\n      $(''.any-'' + current).text(result);\n    });\n  })(current); // и добавляем тут\n}</code>\n<p>В результате, каждую итерацию будет произведено создание новой функции с входящим аргументом <kbd>current</kbd> и моментальный вызов этой же функции с нужным аргументом. После вызова - значение будет передано в качестве аргумента и сохранено внутри функции, т.к. внешняя переменная <kbd>current</kbd> никак не относится к той, что указана в качестве аргумента.</p>', '<figure>\r\n  <img src="/img/u/76dhfwds7o9847.jpg" alt="/img/u/76dhfwds7o9847.jpg" />\r\n  <figcaption><span>Для каждого языка нужен свой подход.</span></figcaption>\r\n</figure>\r\n<p>Не забывайте, что JS - асинхронный язык программирования и очень часто бывает сложно понять откуда ошибка, ну например в таком коде:</p>\r\n\r\n<code data-lang="javascript">var arr = [''test'', ''ololo'', ''123123a'', 4], current = undefined;\r\n\r\nfor (var i = 0, length = arr.length; i < length; i++) {\r\n  current = arr[i];\r\n \r\n  $.post(''/some/'' + current, {}, function(result) {\r\n    $(''.any-'' + current).text(result);\r\n  });\r\n}</code>\r\n\r\n<p>В теории должен слаться асинхронный запрос на <kbd>/some/test</kbd>, затем на <kbd>/some/ololo</kbd> и так далее и затем результат вставляться в элемент с классом <kbd>class="any-test"</kbd>, затем в <kbd>class="any-ololo"</kbd> и т.д. То есть запросу на N должен соответствовать элемент <kbd>.any-N</kbd>, но этого не будет. На практике же весь результат будет отправляться в элемент с <kbd>class="any-4"</kbd>, т.е. с классом из последней ячейки массива arr.</p>\r\n<p>Ответ на вопрос "почему же так" сокрыт как раз в асинхронности языка. Каждый вызов метода <kbd>$.post</kbd> происходит в отдельном потоке (конечно же это не так, но для примера определение вполне сгодится) и в тот момент, когда происходит вызов - JS не дожидается его завершения и переходит к следующей итерации цикла <kbd>for</kbd>. Таким образом переменная <kbd>current</kbd> будет перезаписываться до самого окончания цикла и в момент вызова коллбека с результатом выполнения - значением этой переменной будет самый последний элемент из массива.</p>\r\n<p>А как же решить эту проблему? Всё просто, надо добавить замыкание с сохранением состояния этой переменной:</p>\r\n<code data-lang="javascript">var arr = [''test'', ''ololo'', ''123123a'', 4], current = undefined;\r\n\r\nfor (var i = 0, length = arr.length; i < length; i++) {\r\n  current = arr[i];\r\n \r\n  (function (current) { // добавляем тут\r\n    $.post(''/some/'' + current, {}, function(result) {\r\n      $(''.any-'' + current).text(result);\r\n    });\r\n  })(current); // и добавляем тут\r\n}</code>\r\n<p>В результате, каждую итерацию будет произведено создание новой функции с входящим аргументом <kbd>current</kbd> и моментальный вызов этой же функции с нужным аргументом. После вызова - значение будет передано в качестве аргумента и сохранено внутри функции, т.к. внешняя переменная <kbd>current</kbd> никак не относится к той, что указана в качестве аргумента.</p>', '<annotation>Не забывайте, что JS - асинхронный язык программирования и очень часто бывает сложно понять откуда ошибка.</annotation>\r\n<figure>\r\n  <img src="/img/u/76dhfwds7o9847.jpg" alt="/img/u/76dhfwds7o9847.jpg" />\r\n  <figcaption><span>Для каждого языка нужен свой подход.</span></figcaption>\r\n</figure>\r\n<p>Давайте поговорим об этом в этой статье.</p>', 2, 1, 748, 1, '2014-06-02 07:00:11', '2016-04-04 02:41:01');
INSERT INTO `st_blogs` VALUES (5, 'Подслащаем CoffeeScript', '', '', '<annotation>CoffeeScript и так запредельно сладкий, но его можно подсластить.</annotation>\r\n<figure>\r\n  <img src="/img/u/khl75g58gr5ghr5.jpg" alt="/img/u/khl75g58gr5ghr5.jpg" />\r\n  <figcaption><span>Сферический сахар в вакууме</span></figcaption>\r\n</figure>\r\n<p></p>', 2, 1, 16, 0, '2014-06-02 10:57:58', '2014-07-14 20:20:31');

-- --------------------------------------------------------

--
-- Структура таблицы `st_categories`
--

CREATE TABLE `st_categories` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `color` varchar(6) COLLATE utf8_unicode_ci NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci AUTO_INCREMENT=4 ;

--
-- Дамп данных таблицы `st_categories`
--

INSERT INTO `st_categories` VALUES (1, 'Архитектура игры', 'd54d1c', '2014-05-15 18:22:37', '2014-05-15 12:25:59');
INSERT INTO `st_categories` VALUES (2, 'JS твики', '7ae226', '2014-06-02 11:38:45', '2014-06-02 06:52:11');
INSERT INTO `st_categories` VALUES (3, 'Общее', '0fa012', '2014-07-15 16:22:36', '2014-05-15 18:22:37');

-- --------------------------------------------------------

--
-- Структура таблицы `st_migrations`
--

CREATE TABLE `st_migrations` (
  `migration` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `batch` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Дамп данных таблицы `st_migrations`
--

INSERT INTO `st_migrations` VALUES ('2014_05_10_191918_create_users_table', 1);
INSERT INTO `st_migrations` VALUES ('2014_05_12_075943_create_password_reminders_table', 1);
INSERT INTO `st_migrations` VALUES ('2014_05_12_140014_create_blog_table', 1);
INSERT INTO `st_migrations` VALUES ('2014_05_12_140236_create_category_table', 1);

-- --------------------------------------------------------

--
-- Структура таблицы `st_password_reminders`
--

CREATE TABLE `st_password_reminders` (
  `email` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `token` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  KEY `password_reminders_email_index` (`email`),
  KEY `password_reminders_token_index` (`token`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Дамп данных таблицы `st_password_reminders`
--


-- --------------------------------------------------------

--
-- Структура таблицы `st_users`
--

CREATE TABLE `st_users` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `login` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `last_name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `photo` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `job` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `email` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `password` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `permissions_id` int(11) NOT NULL DEFAULT '1',
  `remember_token` varchar(64) COLLATE utf8_unicode_ci DEFAULT NULL,
  `social_link` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`id`),
  UNIQUE KEY `users_email_unique` (`email`),
  KEY `users_permissions_id_index` (`permissions_id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci AUTO_INCREMENT=4 ;

--
-- Дамп данных таблицы `st_users`
--

INSERT INTO `st_users` VALUES (1, 'serafim', 'Kirill', 'Nesmeyanov', '/img/user/453edab57e3fc04b57725bf6e103c66a.jpg', 'Web Developer', 'admin@email.com', '$2y$10$U4p4EylNIV/2Rlem5dWv9OGLHTWlmJvNvY6uSHELwcvODX3Pvgr.i', 5, 'WE1YetCXOvG0FOW7QjiAKdLsa0NpJMN7Ol2deZpNfuY0U9C9w1fxNaJpsSb1', 'https://plus.google.com/115198236730896788181?rel=author', '2014-05-15 12:25:59', '2014-07-18 20:13:58');
INSERT INTO `st_users` VALUES (2, 'srcserafim', 'Кирилл', 'Несмеянов', 'https://fbcdn-profile-a.akamaihd.net/hprofile-ak-frc1/t1.0-1/1891013_648806078511895_1974551485_n.jpg', NULL, 'nesk@xakep.ru', '$2y$10$xQ3t1mqgHctiqmyYf74DUOOGz51asY/y690KSTjrmxtoheCNw0JPa', 5, 'sK671XcHUVTpoLpTsqBiZvxptDuyJOkb67EppUcOpIizsjezXiMupTRkvtrA', '', '2014-06-03 11:46:57', '2014-06-03 07:44:23');
INSERT INTO `st_users` VALUES (3, 'serafimarts', 'Кирилл', 'Несмеянов', 'http://cs5278.vk.me/v5278981/643/Xk5dxrqLVzk.jpg', NULL, NULL, '$2y$10$TzFNpxiTBfQLBPe9.8ko8eNCPMfSXBkYlrO0BfDr1/crlbi2X5vM.', 5, 'J8C2y9szuEpPPjkWUzinVPJSzciAY8lpBNS5SFrYWBUpAC0WF3irWFzQVo2T', '', '2014-06-03 11:58:46', '2014-06-03 08:01:30');
